<?php

/**
 * @file
 * Contains theme override functions and preprocess functions
 */

use Drupal\Core\Template\RenderWrapper;
use Drupal\Core\Template\Attribute;
use Drupal\search\Form\SearchBlockForm;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\system\Form\ThemeSettingsForm;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Drupal\file\Plugin\Core\Entity\FileInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;


function drupal8_parallax_theme_preprocess_html(&$variables) {
	$is_front_page = \Drupal::service('path.matcher')->isFrontPage();
  if($is_front_page)$variables['head_title']['title'] = "";
}


/**
 * Implements hook_preprocess_page() for block templates.
 */

function drupal8_parallax_theme_preprocess_page(&$variables) {

  // Add Responsive class for Top Widget.
  if (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second']) && !empty($variables['page']['topwidget_third'])) {
    $variables['topwidget_class'] = 'col-sm-4';
    $variables['topwidget_third_class'] = 'col-sm-4';
  }
  elseif((!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second'])) or (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_third'])) or (!empty($variables['page']['topwidget_third']) && !empty($variables['page']['topwidget_second']))) {
    $variables['topwidget_class'] = 'col-sm-6';
    $variables['topwidget_third_class'] = 'col-sm-6';
  }
  else {
    $variables['topwidget_class'] = 'col-md-12';
  }

  // Add Responsive class for Bottom Widget.
  if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_forth'])) {
    $variables['bottom_class'] = 'col-sm-3';
  }
  else if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third'])) {
    $variables['bottom_class'] = 'col-sm-4';
  }
  else if((!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second'])) or (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_third'])) or (!empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_second']))) {
    $variables['bottom_class'] = 'col-sm-6';
  }
  else {
    $variables['bottom_class'] = 'col-md-12';
  }

  // Add Responsive class for footer.
  if (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second']) && !empty($variables['page']['footer_third'])) {
    $variables['footer_class'] = 'col-md-4';
    $variables['footer_first_class'] = 'col-md-4';
  }
  elseif((!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second'])) or (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_third'])) or (!empty($variables['page']['footer_third']) && !empty($variables['page']['footer_second']))) {
    $variables['footer_class'] = 'col-md-6';
    $variables['footer_first_class'] = 'col-md-6';
  }
  else {
    $variables['footer_class'] = 'col-md-12';
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-6';
    $variables['sidebarfirst'] = 'col-md-3';
    $variables['sidebarsecond'] = 'col-md-3';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['contentlayout'] = 'col-md-9 ';
    $variables['sidebarfirst'] = 'col-md-3';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-9';
    $variables['sidebarsecond'] = 'col-md-3';
  }
  else {
    $variables['contentlayout'] = 'col-md-12';
  }

  // ArchivesSpace layout
  if (!empty($variables['node']) && in_array($variables['node']->bundle(), ['archival_resource','archival_object',]) &&
      !empty($variables['page']['sidebar_second'])){
    $variables['contentlayout'] = "nobottommargin clearfix";
    $variables['sidebar'] = 'panel panel-default';
    $variables['sidebarsecond'] = '';
  }

  // Social media global variable.
  $variables['show_social_icon'] = theme_get_setting('show_social_icon');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['google_plus_url'] = theme_get_setting('google_plus_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['pinterest_url'] = theme_get_setting('pinterest_url');
  $variables['rss_url'] = theme_get_setting('rss_url');
  $variables['show_credit_link'] = theme_get_setting('show_credit_link');

  //To get the current url
  $current_url  = \Drupal::request()->getRequestUri();
  $current_path = explode("/", $current_url);
  $variables['current_path'] = (count($current_path) > 2) ? $current_path[2] : '';
  
  // Slider
  // Asign Variable for Slider
  if ($variables['is_front']) {
    if (theme_get_setting('show_slideshow','drupal8_parallax_theme') == 1) {
      $variables['show_slideshow'] = 1;
      $variables['slider_content'] = drupal8_parallax_theme_get_slider_content();
    }
  }
  
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();
  $variables['is_front_page'] = $is_front_page;
  if ($is_front_page) {
    $variables['search_bar_slider_data_height'] = [
      'lg' => '670',
      'md' => '500',
      'sm' => '400',
      'xs' => '250',
      'xxs' => '250',
    ];
  }
  
  $edit_current_path=\Drupal::service('path.current')->getPath();

  // Load all collections taxonomy term.
  $termStorage=\Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $variables['collections_list']=$termStorage->loadTree('collections',0,NULL,TRUE);

  $tree = \Drupal::menuTree()->load('divisions', new \Drupal\Core\Menu\MenuTreeParameters());
  foreach ($tree as $k=>$item){
	  $url_obj=$item->link->getUrlObject();
	  $title=$item->link->getTitle();
	  $url=$url_obj->toString();
	  $options=$url_obj->getOptions();
	  $icon=$options['attributes']['title'];
	  $variables['divisions_menu'][$k]['title']=$title;
	  $variables['divisions_menu'][$k]['url']=$url;
	  $variables['divisions_menu'][$k]['icon']=$icon;
  }
  
  $tree1 = \Drupal::menuTree()->load('topics', new \Drupal\Core\Menu\MenuTreeParameters());
  foreach ($tree1 as $k=>$item){
	  $url_obj=$item->link->getUrlObject();
	  $title=$item->link->getTitle();
	  $url=$url_obj->toString();
	  $options=$url_obj->getOptions();
	  $icon=$options['attributes']['title'];
	  $variables['topics_menu'][$k]['title']=$title;
	  $variables['topics_menu'][$k]['url']=$url;
	  $variables['topics_menu'][$k]['icon']=$icon;
  }
  
  $tree2 = \Drupal::menuTree()->load('formats', new \Drupal\Core\Menu\MenuTreeParameters());
  foreach ($tree2 as $k=>$item){
	  $url_obj=$item->link->getUrlObject();
	  $title=$item->link->getTitle();
	  $url=$url_obj->toString();
	  $options=$url_obj->getOptions();
	  $icon=$options['attributes']['title'];
	  $variables['formats_menu'][$k]['title']=$title;
	  $variables['formats_menu'][$k]['url']=$url;
	  $variables['formats_menu'][$k]['icon']=$icon;
  }

  // Attach libraries for archival resource and object pages. 
  if (array_key_exists('node', $variables) && 
      $variables['node'] instanceof NodeInterface &&
      in_array($variables['node']->bundle(), ['archival_resource','archival_object','archival_top_container'])) {
    $variables['#attached']['library'][] = 'drupal8_parallax_theme/archivesspace';
  } 
}

/**
 * Implements hook_preprocess_page() for the search page.
 */

function drupal8_parallax_theme_preprocess_page__search(&$variables) {
  $url = \Drupal\Core\Url::fromUserInput(\Drupal::request()->getRequestUri());
  $query = $url->getOption('query');
  if (array_key_exists('keys', $query)) {
    $variables['search_terms'] = $query['keys']; 
  }

  // Ensure we get our CSS even if we have no results.
  $variables['#attached']['library'][] = 'drupal8_parallax_theme/search';
}

/**
 * Implements hook_preprocess_menu().
 */
function drupal8_parallax_theme_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu__main') { // We're doing that for main menu.
    // Get the current path.
    $current_path = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, set active to li.
      if ($item['url']->toString() == $current_path) {
      // Add active link.
      $variables['items'][$key]['attributes']['class'] = 'active';
      }
    }
  }
}

/**
 * Slider
 * Implements custom function for get slider content.
 */
function drupal8_parallax_theme_get_slider_content() {
  $slider_content = array();
  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $fid = theme_get_setting('slide_image_path'.$i,'drupal8_parallax_theme');
    if (!empty($fid)) {
      $file = Drupal\file\Entity\File::load($fid[0]);
      $uri = $file->getFileUri();
      $path = file_create_url($uri);
    }
    else {
      $path = base_path() . drupal_get_path('theme', 'drupal8_parallax_theme') . theme_get_setting('slide_image_path_' . $i, 'drupal8_parallax_theme');
    }
    $slider_content[$i] = '<li>
      <img src="' . $path . '" alt="Slider Banner" />
      <div class="slider-caption">
        <h2 class="slider-title">' . theme_get_setting('slide_title_' . $i, 'drupal8_parallax_theme').'</h2>
        <div class="clearfix"><p class="slider-description">' . theme_get_setting('slide_description_' . $i, 'drupal8_parallax_theme').'</p></div>
        <a href=' . theme_get_setting('slide_url_' . $i, 'drupal8_parallax_theme') . ' class="more-link">Read more</a>
      </div>
    </li>';
  }
  return $slider_content;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function drupal8_parallax_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {

  $form['drupal8_parallax_theme_info'] = array(
    '#markup' => '<h2><br/>Advanced Theme Settings</h2><div class="messages messages--warning">Clear cache after making any changes in theme settings. <a href="../../config/development/performance">Click here to clear cashe</a></div>'
  );

  //Social Icon Link
  $form['drupal8_parallax_theme_settings']['social_icon'] = array(
    '#type' => 'details',
    '#title' => t('Social Media Link'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['show_social_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Social Icons'),
    '#default_value' => theme_get_setting('show_social_icon'),
    '#description'   => t("Show/Hide Social media links"),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['facebook_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook URL'),
    '#default_value' => theme_get_setting('facebook_url'),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['google_plus_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Google plus URL'),
    '#default_value' => theme_get_setting('google_plus_url'),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['twitter_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter URL'),
    '#default_value' => theme_get_setting('twitter_url'),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['linkedin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('LinkedIn URL'),
    '#default_value' => theme_get_setting('linkedin_url'),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['pinterest_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Pinterest URL'),
    '#default_value' => theme_get_setting('pinterest_url'),
  );
  $form['drupal8_parallax_theme_settings']['social_icon']['rss_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS URL'),
    '#default_value' => theme_get_setting('rss_url'),
  );

  // Custom submit to save the file permenant.
  // $form['#submit'][] = 'drupal8_parallax_theme_settings_form_submit';

  //Show/Hide credit
  $form['drupal8_parallax_theme_settings']['credit_link'] = array(
    '#type' => 'details',
    '#title' => t('Footer Credit Link'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_parallax_theme_settings']['credit_link']['show_credit_link'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show/Hide 'Designed by Zymphonies' credit text"),
    '#default_value' => theme_get_setting('show_credit_link'),
    '#description'   => t("Highly recomend to display credit in footer"),
  );
  //Slide show config 
  $form['drupal8_parallax_theme_settings']['slideshow'] = array(
    '#type' => 'details',
    '#title' => t('Front Page Slideshow'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_parallax_theme_settings']['slideshow']['no_of_slides'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of slides'),
    '#default_value' => theme_get_setting('no_of_slides'),
    '#description'  => t("Enter the number of slides required & Save configuration"),
    '#markup' => '<div class="messages messages--warning">Clear caches after making any changes in theme settings. <a href="../../config/development/performance">Click here to clear cashe</a></div>',
  );
  $form['drupal8_parallax_theme_settings']['slideshow']['show_slideshow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Slideshow'),
    '#default_value' => theme_get_setting('show_slideshow'),
    '#description'   => t("Show/Hide Slideshow in home page"),
  );
  $form['drupal8_parallax_theme_settings']['slideshow']['slide'] = array(
    '#markup' => t('Change the banner image, title, description and link using below fieldset'),
  );
  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $form['drupal8_parallax_theme_settings']['slideshow']['slide' . $i] = array(
      '#type' => 'details',
      '#title' => t('Slide '.$i),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['drupal8_parallax_theme_settings']['slideshow']['slide' . $i]['slide_image_path' . $i] = array(
      '#type' => 'managed_file',
      '#title' => t('Slide '.$i.' Image'),
      '#default_value' => theme_get_setting('slide_image_path'.$i,'drupal8_parallax_theme'),
      '#upload_location' => 'public://',
    );
    $form['drupal8_parallax_theme_settings']['slideshow']['slide' . $i]['slide_title_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide '.$i.' Title'),
      '#default_value' => theme_get_setting('slide_title_' . $i,'drupal8_parallax_theme'),
    );
    $form['drupal8_parallax_theme_settings']['slideshow']['slide' . $i]['slide_description_' . $i] = array(
      '#type' => 'textarea',
      '#title' => t('Slide '.$i.' Description'),
      '#default_value' => theme_get_setting('slide_description_' . $i,'drupal8_parallax_theme'),
    );    
    $form['drupal8_parallax_theme_settings']['slideshow']['slide' . $i]['slide_url_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide '.$i.' URL'),
      '#default_value' => theme_get_setting('slide_url_' . $i,'drupal8_parallax_theme'),
    );
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function drupal8_parallax_theme_preprocess_breadcrumb(&$variables){
  if(($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']){
    $variables['breadcrumb'][] = array(
     'text' => $node->getTitle(),
     'url' => $node->toURL()
   );
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupal8_parallax_theme_preprocess_node(&$variables) {
  $node = $variables['node'];
  //check content type
  if ($node->getType() == 'dc_object') {
    $variables['#attached']['library'][] = 'drupal8_parallax_theme/digital_objects'; 
    $variables['#attached']['library'][] = 'drupal8_parallax_theme/readmore'; 
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function drupal8_parallax_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  // Update the Taxonomy term exposed form.
  if (in_array($view['view']->id(), ['taxonomy_term','all_digital_objects']) && ($view['view']->current_display == 'page_grid')) {
    $form['#attached']['library'][] = 'drupal8_parallax_theme/compact-form';
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted__islandora_search().
 */
function drupal8_parallax_theme_preprocess_views_view_unformatted__islandora_search(&$variables) {
  $display = \Drupal::request()->query->get('display');
  $variables['display_mode'] = ( $display ? $display.'-group-item' : 'list-group-item' );
}

/**
 * Common function for the search result display modes.
 */
function search_result_alter(&$variables){
  $islandora_utils = \Drupal::service('islandora.utils');
  $thumbnail_term = $islandora_utils->getTermForUri('http://pcdm.org/use#ThumbnailImage');
  // Set fbox-icon based on bundle
  $fbox_icon = 'icon-line2-doc';
  $type_label = '';
  if (!empty($variables['node'])) {
    $node = $variables['node'];
    if ($node->bundle() == 'archival_object') {
      $fbox_icon = 'icon-archive';
      $type_label = 'Archival Component';
    } elseif ($node->bundle() == 'archival_resource') {
      $fbox_icon = 'icon-box';
      $type_label = 'Archival Collection';
    } elseif ($node->bundle() == 'dc_object' && $node->field_resource_type->entity) {
      $type_label = $node->field_resource_type->entity->name->value;
      // dynamically switch icon on field_resource_type 
      switch ($node->field_resource_type->entity->name->value) {
        case 'Still Image':
        case 'Image':
          $fbox_icon = 'icon-image';
          $type_label = 'Image';
          break;
        case 'Text':
          $fbox_icon = 'icon-type';
          break;
        case 'Sound':
          $fbox_icon = 'icon-volume-up';
          break;
        case 'Moving Image':
          $fbox_icon = 'icon-video';
          break;
        case 'Dataset':
          $fbox_icon = 'icon-bar-chart';
          break;
        // Default to generic.
        case 'Collection':
        case 'Software':
        case 'Interactive Resource':
        case 'Physical Object':
        case 'Service':
        default:
          $fbox_icon = 'icon-line2-doc';
          break;
      }
      // Use mixed-content if we have multiple types.
      if ($node->field_resource_type->count() > 1) {
        $fbox_icon = 'icon-mixed-content';
        $type_label = 'Mixed Content';
      }
    }

    // See if the node has a thumbnail we can use.
    $thumbnail = $islandora_utils->getMediaWithTerm($node, $thumbnail_term);
    if ($thumbnail) {
      // @TODO: Add alt-text from the Media or Node.
      $variables['thumbnail_url'] = file_create_url($thumbnail->field_media_image->entity->getFileUri());
    }
  } elseif (!empty($variables['term'])) {
    // Taxonomy terms.
    $term = $variables['term'];
    $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load($term->bundle());
    $type_label = $vocabulary->label();
    switch ($term->bundle()) {
      case 'digital_projects':
        $fbox_icon = 'icon-wrench';
        break;
      case 'corporate_body':
      case 'family':
        $fbox_icon = 'icon-users';
        break;
      case 'geo_location':
        $fbox_icon = 'icon-globe';
        break;
      case 'person':
        $fbox_icon = 'icon-user';
        break;
      case 'resource_types':
      case 'subject':
      case 'time_period':
        $fbox_icon = 'icon-tag';
        break;
    }
 
    // @TODO: Potentially add thumbnails someday.
  }
  // Other entities?
  $variables['type_label'] = $type_label;
  $variables['fbox_icon'] = $fbox_icon;
}

/**
 * Implements hook_preprocess_node__search_result_list().
 */
function drupal8_parallax_theme_preprocess_node__search_result_list(&$variables){
  search_result_alter($variables);
}

/**
 * Implements hook_preprocess_node__search_result_grid().
 */
function drupal8_parallax_theme_preprocess_node__search_result_grid(&$variables){
  search_result_alter($variables);
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 *
 * See https://www.drupal.org/project/drupal/issues/2767243#comment-12725020
 */
function drupal8_parallax_theme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Adds display mode as an option for field templates.
 * Used for the copyright acknowledgement button.
 */
function drupal8_parallax_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' . 
    $variables['element']['#field_type'] . '__' . 
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_taxonomy_term__search_result_list().
 */
function drupal8_parallax_theme_preprocess_taxonomy_term__search_result_list(&$variables){
  search_result_alter($variables);
}

/**
 * Implements hook_preprocess_taxonomy_term__search_result_grid().
 */
function drupal8_parallax_theme_preprocess_taxonomy_term__search_result_grid(&$variables){
  search_result_alter($variables);
}

/**
 * Implements hook_preprocess_page_title().
 */
function drupal8_parallax_theme_preprocess_page_title(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() === 'archival_resource' && isset($node->field_resource_identifier)) {
      $variables['resource_identifier'] = $node->get('field_resource_identifier')->value;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function drupal8_parallax_theme_views_pre_render(ViewExecutable $view) {
  if (isset($view)) {
    if ($view->storage->id() == 'finding_aids') {
      $view->element['#attached']['library'][] = 'drupal8_parallax_theme/finding-aid-view';
    }
    if ($view->storage->id() == 'newspaper_issues') {
      $view->element['#attached']['library'][] = 'drupal8_parallax_theme/newspapers';
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 *
 * Attaches library for select2 facets customizations.
 */
function drupal8_parallax_theme_preprocess_form_element(&$variables) {
  if ($variables['element']['#type'] == 'select2' && $variables['element']['#attributes']['data-drupal-selector'] == 'facet-type') {
    $variables['#attached']['library'][] = 'drupal8_parallax_theme/select2-facet';
  }
}

/**
 * Implements hook_preprocess_field__file__download_link().
 */
function drupal8_parallax_theme_preprocess_field__file__download_link(&$variables) {
  foreach ($variables['items'] as $delta => $item) {
    // Pull file from the link and reformat it into the file's internal URI.
    // Then load the file entity so we can check the size.
    $file_uri = preg_replace('#http.*_flysystem/fedora/#', 'fedora://', urldecode($item['content']['#url']->getUri()));
    $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $file_uri]);
    $file = reset($files);

    // File bigger than 2 GB in bytes (2 * 1024^3).
    if ($file && $file->getSize() > 2147483648 ) {
      $variables['items'][$delta]['content']['#title'] = preg_replace('/^Download /i', '', $item['content']['#title']);
      // We use the 'too-large' class to tell Twig to output our notice.
      $variables['items'][$delta]['content']['#options']['attributes']['class'][] = 'too-large';
    }
  }
}
